from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, MessageHandler, ContextTypes, filters
import os

TOKEN = os.environ["TOKEN"]
ADMIN_USERNAME = "@aleks_stali"  # ‚Üê –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π username

models = [
    {
        "name": "–ê–ª–∏—Å–∞, 24",
        "city": "–ö–∏—à–∏–Ω—ë–≤",
        "desc": "–ò–∑—ã—Å–∫–∞–Ω–Ω–∞—è, –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–∞—è. –°–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ –¥–ª—è –Ω–∞—Å—Ç–æ—è—â–∏—Ö —Ü–µ–Ω–∏—Ç–µ–ª–µ–π."
    },
    {
        "name": "–≠–≤–∞, 26",
        "city": "–ë–µ–ª—å—Ü—ã",
        "desc": "–¢–∏—Ö–∞—è —Å–∏–ª–∞ –∏ —Ç–æ–Ω–∫–∏–π —à–∞—Ä–º. –î–ª—è –¥–µ–ª–æ–≤—ã—Ö –≤—Å—Ç—Ä–µ—á –∏ —É–∂–∏–Ω–æ–≤."
    }
]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üì∏ –ú–æ–¥–µ–ª–∏", callback_data="show_models")],
        [InlineKeyboardButton("üìç –ì–æ—Ä–æ–¥–∞", callback_data="cities")],
        [InlineKeyboardButton("üìÜ –ó–∞–ø—Ä–æ—Å", callback_data="book")],
        [InlineKeyboardButton("üìû –ú–µ–Ω–µ–¥–∂–µ—Ä", url=f"https://t.me/{ADMIN_USERNAME.strip('@')}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "üå∏ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Fleur de Moldova* üå∏\n"
        "–≠–ª–µ–≥–∞–Ω—Ç–Ω–æ–µ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ –ø–æ –ú–æ–ª–¥–æ–≤–µ\n"
        "–î–∏—Å–∫—Ä–µ—Ç–Ω–æ. –°—Ç–∏–ª—å–Ω–æ. –ü–æ –ª–∏—á–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ üëá",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "show_models":
        for model in models:
            await query.message.reply_text(
                f"üë§ *{model['name']}* ‚Äî {model['city']}\n_{model['desc']}_",
                parse_mode="Markdown"
            )
    elif query.data == "cities":
        cities = sorted(set([m['city'] for m in models]))
        await query.message.reply_text("üìç –î–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ—Ä–æ–¥–∞:\n" + "\n".join(f"‚Ä¢ {c}" for c in cities))
    elif query.data == "book":
        await query.message.reply_text("üìÜ –£–∫–∞–∂–∏—Ç–µ –∏–º—è, –≥–æ—Ä–æ–¥, –¥–∞—Ç—É –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è ‚Äî –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.")
        context.user_data['booking'] = True

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get('booking'):
        text = update.message.text
        await context.bot.send_message(chat_id=ADMIN_USERNAME, text=f"üì• –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:\n{text}")
        await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è.")
        context.user_data['booking'] = False

app = ApplicationBuilder().token(TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(CallbackQueryHandler(button_handler))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
app.run_polling()
